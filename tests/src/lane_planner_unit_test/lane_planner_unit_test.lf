target CCpp {
    cmake-include: "include/CMakeListsExtension.txt",
    build-type: RelWithDebInfo
};

import lane_planner from "../../../src/lane_planner/lane_planner_main.lf";

preamble {=
    #include "lane_planner/lane_planner.hpp"
    #include "trajectory_planner_node_base/trajectory_planner_node_base.hpp"
    #include "had_map_utils/had_map_conversion.hpp"

    // returns a map with a lane has given number of points(n_points)
    // length of the lane will be n_points meters in y direction
    lanelet::LaneletMapPtr getALaneletMapWithLaneId(
        const lanelet::Id & id, const autoware::common::types::float64_t velocity,
        const size_t n_points)
    {
        lanelet::Points3d right_points, left_points, center_points;
        constexpr autoware::common::types::float64_t resolution = 1.0;
        for (size_t i = 0; i < n_points; i++) {
            const auto y = resolution * static_cast<autoware::common::types::float64_t>(i);
            left_points.push_back(lanelet::Point3d(lanelet::utils::getId(), -1, y, 0));
            right_points.push_back(lanelet::Point3d(lanelet::utils::getId(), 1, y, 0));
            center_points.push_back(lanelet::Point3d(lanelet::utils::getId(), 0, y, 0));
        }
        lanelet::LineString3d ls1(lanelet::utils::getId(), left_points);
        lanelet::LineString3d ls2(lanelet::utils::getId(), right_points);
        lanelet::LineString3d ls3(lanelet::utils::getId(), center_points);

        lanelet::Lanelet ll(id, ls1, ls2);
        ll.setCenterline(ls3);
        ll.setAttribute(lanelet::AttributeName::SpeedLimit, velocity);

        return lanelet::utils::createMap({ll});
    }

    autoware_auto_msgs::msg::Route getARoute(const int64_t lane_id, const autoware::common::types::float32_t length)
    {
        autoware_auto_msgs::msg::Route route;
        route.start_point.x = 0;
        route.start_point.y = 0;
        route.goal_point.x = 0;
        route.goal_point.y = length;

        autoware_auto_msgs::msg::MapPrimitive primitive;
        primitive.id = lane_id;
        route.primitives.push_back(primitive);

        return route;
    }
=}


reactor tester {
    output route:std::shared_ptr<autoware_auto_msgs::msg::Route>;
    output map:std::shared_ptr<autoware_auto_msgs::msg::HADMapBin>;
    logical action set_map;
    logical action set_route;
    state id:lanelet::Id;
    state map_ptr:std::shared_ptr<lanelet::LaneletMap>;
    state m_planner_ptr:std::shared_ptr<autoware::lane_planner::LanePlanner>;

    reaction(startup) -> set_map {=
        self->map_ptr = std::shared_ptr<lanelet::LaneletMap>();
        self->m_planner_ptr = std::shared_ptr<autoware::lane_planner::LanePlanner>();
    
        const auto vehicle_param = motion::motion_common::VehicleConfig{
            1.0F,  // cg_to_front_m:
            1.0F,  // cg_to_rear_m:
            0.1F,  // front_corner_stiffness:
            0.1F,  // rear_corner_stiffness:
            1500.0F,  // mass_kg:
            12.0F,  // yaw_inertia_kgm2:
            2.0F,  // width_m:
            0.5F,  // front_overhang_m:
            0.5F  // rear_overhang_m:
        };
        const auto config = motion::planning::trajectory_smoother::TrajectorySmootherConfig{
            1.0F,  // standard_deviation
            5  // kernel_size
        };
        const auto planner_config = autoware::lane_planner::LanePlannerConfig{
            2.0F  // trajectory_resolution
        };
        self->m_planner_ptr = std::make_shared<autoware::lane_planner::LanePlanner>(
            vehicle_param, config,
            planner_config);
    
        // create map
        const auto lane_id = lanelet::utils::getId();
        self->id = lane_id;
        constexpr autoware::common::types::float64_t velocity_mps = 1.0;
        constexpr size_t n_points = 5;
        const auto lanelet_map_ptr = getALaneletMapWithLaneId(self->id, velocity_mps, n_points);
        self->map_ptr = std::move(lanelet_map_ptr);

        schedule(set_map, MSEC(1));
    =}

    reaction(set_map) -> map, set_route {=
        auto map_bin = autoware_auto_msgs::msg::HADMapBin();
        if (self->map_ptr == nullptr) {
            error_print_and_exit("Map is not set");
        }
        autoware::common::had_map_utils::toBinaryMsg(self->map_ptr, map_bin);  // TODO: Why does this line fail?

        SET(map, std::make_shared<autoware_auto_msgs::msg::HADMapBin>(map_bin));
        schedule(set_route, MSEC(1));
    =}

    reaction (set_route) -> route {=
        // create route message
        const auto some_route = getARoute(self->id, 5.0F);
        const auto trajectory = self->m_planner_ptr->plan_trajectory(some_route, self->map_ptr);
        // return trajectory should not be empty
        if (trajectory.points.empty()) {
            error_print_and_exit("WRONG");
        }

        // start point of trajectory should be same as start point
        const auto distance = autoware::lane_planner::distance2d(
            some_route.start_point,
            trajectory.points.front());
        if (distance != 0.0) {
            error_print_and_exit("WRONG");
        }

        info_print("SUCCESS");
        request_stop();
    =}
}

federated reactor {
    lane_planner = new lane_planner();
    
    tester = new tester();
    tester.map -> lane_planner.map serializer "ROS2";
    tester.route -> lane_planner.route serializer "ROS2";
}

