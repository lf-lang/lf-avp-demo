target CCpp {
  cmake-include: "include/CMakeListsExtension.txt",
  files: ["../include/utils.hpp", "../include/constants.hpp"],
  threading: true
}

preamble {=
  #include <QApplication>  // NOLINT: cpplint is unable to handle the include order here
  #include "rclcpp/rclcpp.hpp"
  #include "rviz_common/logging.hpp"
  #include "rviz_common/ros_integration/ros_client_abstraction.hpp"
  #include "rviz_common/visualizer_app.hpp"
  #include "utils.hpp"
  #include "constants.hpp"
  #include <stdlib.h>
=}

reactor rviz2 {
  reaction(startup) {=
    static std::string rviz_config = get_autoware_home() + "/" + AVP_DEMO_CONFIG_PATH + "/" + RVIZ_CONFIG;

    int argc = 3;
    char *argv[] = {
        "lf_rviz",
        "-d",
        &rviz_config[0],
        NULL
    };

    QApplication qapp(argc, argv);

    // TODO(wjwwood): use node's logger here in stead
    auto logger = rclcpp::get_logger("rviz2");
    // install logging handlers to route logging through ROS's logging system
    rviz_common::set_logging_handlers(
        [logger](const std::string & msg, const std::string &, size_t) {
          RCLCPP_DEBUG(logger, msg.c_str());
        },
        [logger](const std::string & msg, const std::string &, size_t) {
          RCLCPP_INFO(logger, msg.c_str());
        },
        [logger](const std::string & msg, const std::string &, size_t) {
          RCLCPP_WARN(logger, msg.c_str());
        },
        [logger](const std::string & msg, const std::string &, size_t) {
          RCLCPP_ERROR(logger, msg.c_str());
        }
    );

    rviz_common::VisualizerApp vapp(
     std::make_unique<rviz_common::ros_integration::RosClientAbstraction>());
    vapp.setApp(&qapp);
    if (vapp.init(argc, argv)) {
        exit(qapp.exec());
    } else {
        exit(1);
    }
  =}
}

main reactor {
  li = new rviz2()
}
