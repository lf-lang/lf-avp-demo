target CCpp {
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["../include/utils.hpp"],
    threads: 1
};

preamble {=
    #include "voxel_cloud_node.hpp"
    #include "utils.hpp"
=}

reactor voxel_grid_downsampler {
    input points_in:std::shared_ptr<sensor_msgs::msg::PointCloud2>;
    output points_out:std::shared_ptr<sensor_msgs::msg::PointCloud2>;
    
    state node:autoware::perception::filters::voxel_grid_nodes::VoxelCloudNode*;
    
    reaction (startup) {=
        rclcpp::NodeOptions nodeOptions = get_node_options_from_yaml(
            "/home/lfros/Projects/XronOS/src/voxel_grid_downsampler/include/scan_downsampler_ms3.param.yaml", 
            "/**"
        );
        
        self->node = new autoware::perception::filters::voxel_grid_nodes::VoxelCloudNode(nodeOptions);
    =}
        
    reaction (points_in) -> points_out {=
          try {
            self->node->m_voxelgrid_ptr->insert(*points_in->value);
            //outgoing_point_cloud.sequence_number = points_in->value.sequence_number;
            auto msg = std::make_shared<sensor_msgs::msg::PointCloud2>(self->node->m_voxelgrid_ptr->get());
            // info_print("Downsampled pointcloud size: %d", msg->width);
            SET(points_out, msg);
          } catch (const std::exception & e) {
            std::string err_msg{self->node->get_name()};
            err_msg += ": " + std::string(e.what());
            error_print("%s", err_msg.c_str());
            self->node->m_has_failed = true;
          } catch (...) {
            std::string err_msg{"Unknown error occurred in "};
            err_msg += self->node->get_name();
            error_print("%s", err_msg.c_str());
            throw;
          }
	=}
}

main reactor {
    vgd = new voxel_grid_downsampler();
}