target CCpp {
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["include/package.xml", "../include/utils.hpp"],
    threads: 1
};

preamble {=
    #include "sensor_msgs/msg/point_cloud2.hpp"
    #include "point_cloud_fusion_node.hpp"
    #include "utils.hpp"
=}

reactor point_cloud_fusion(in_width:int(2), stp_offset:time(10 msec)) {
	input[in_width] points_in:std::shared_ptr<sensor_msgs::msg::PointCloud2>;
	output points_out:std::shared_ptr<sensor_msgs::msg::PointCloud2>;
	
	state node:autoware::perception::filters::point_cloud_fusion_nodes::PointCloudFusionNode*;
	
	reaction (startup) {=
        rclcpp::NodeOptions nodeOptions = get_node_options_from_yaml(
            "/home/lfros/Projects/XronOS/src/point_cloud_fusion/include/vlp16_sim_lexus_pc_fusion.param.yaml", 
            "/**"
        );
        
        self->node = new autoware::perception::filters::point_cloud_fusion_nodes::PointCloudFusionNode(nodeOptions);
    =}
        
    reaction (points_in) -> points_out {=
        if (!points_in[0]->is_present || !points_in[0]->is_present) {
            error_print("Expected both point clouds.");
            return;
        }
        // info_print("Calling pointcloud_callback %d %d.", points_in[0]->value->width, points_in[1]->value->width);
        self->node->pointcloud_callback(
            points_in[0]->value,
            points_in[1]->value,
            std::make_shared<const sensor_msgs::msg::PointCloud2>(),
            std::make_shared<const sensor_msgs::msg::PointCloud2>(),
            std::make_shared<const sensor_msgs::msg::PointCloud2>(),
            std::make_shared<const sensor_msgs::msg::PointCloud2>(),
            std::make_shared<const sensor_msgs::msg::PointCloud2>(),
            std::make_shared<const sensor_msgs::msg::PointCloud2>()
         );
        auto msg = std::make_shared<sensor_msgs::msg::PointCloud2>(self->node->m_cloud_concatenated);
        SET(points_out, msg);
        // info_print("Output width = %d", points_out->value->width);
	=}
}

main reactor {
    pcf = new point_cloud_fusion();
}