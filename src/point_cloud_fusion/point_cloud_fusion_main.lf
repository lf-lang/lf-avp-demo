target C {
    cmake: true,
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["include/package.xml", "../include/utils.hpp"],
    threads: 1,
    flags: ["-Wno-write-strings"],
    compiler: "g++"
};

preamble {=
    #include "sensor_msgs/msg/point_cloud2.hpp"
    #include "point_cloud_fusion_node.hpp"
    #include "utils.hpp"
=}

reactor point_cloud_fusion(in_width:int(2)) {
	input[in_width] points_in:sensor_msgs::msg::PointCloud2;
	output points_out:sensor_msgs::msg::PointCloud2;
	
	state node:autoware::perception::filters::point_cloud_fusion_nodes::PointCloudFusionNode*;
	
	reaction (startup) {=
        rclcpp::NodeOptions nodeOptions = get_node_options_from_yaml(
            "/home/lfros/Projects/XronOS/src/point_cloud_fusion/include/vlp16_sim_lexus_pc_fusion.param.yaml", 
            "/**"
        );
        
        self->node = new autoware::perception::filters::point_cloud_fusion_nodes::PointCloudFusionNode(nodeOptions);
    =}
        
    reaction (points_in) -> points_out {=
        if (!points_in[0]->is_present || !points_in[0]->is_present) {
            error_print_and_exit("Expected both point clouds.");
        }
        std::shared_ptr<const sensor_msgs::msg::PointCloud2> msg1(&points_in[0]->value);
        std::shared_ptr<const sensor_msgs::msg::PointCloud2> msg2(&points_in[1]->value);
        info_print("Calling pointcloud_callback.");
        self->node->pointcloud_callback(
            msg1,
            msg2,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL
         );
        SET(points_out, self->node->m_cloud_concatenated);
	=}
}

main reactor {
    pcf = new point_cloud_fusion();
}