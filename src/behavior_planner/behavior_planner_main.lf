/**
 * Note: Please change AUTOWARE_HOME in include/CMakeListsExtension.txt to
 * reflect your top-level AutowareAuto folder. You can do this by changing
 * the follwoing line:
 * 
 *     set(AUTOWARE_HOME /home/$ENV{USER}/adehome/AutowareAuto)
 * 
 */

target C {
    cmake: true,
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["../include/utils.hpp"],
    threads: 1,
    flags: ["-Wno-write-strings"],
    compiler: "g++"
};

preamble {=
    #include "lanelet2_core/LaneletMap.h"
    #include "had_map_utils/had_map_conversion.hpp"
    #include "had_map_utils/had_map_query.hpp"
    #include "autoware_auto_msgs/msg/vehicle_kinematic_state.hpp"
    #include "autoware_auto_msgs/msg/vehicle_state_report.hpp"
    #include "autoware_auto_msgs/msg/vehicle_state_command.hpp"
    #include "behavior_planner.hpp"
    #include "behavior_planner_node.hpp"
    #include "utils.hpp"
=}

reactor behavior_planner {
    //////// INPUTS /////////
    // Global path from global planner.
    input global_path:std::shared_ptr<autoware_auto_msgs::msg::Route>;
    
    // Map returned from map provider.
    input map:std::shared_ptr<autoware_auto_msgs::msg::HADMapBin>;
    
    // Inputs from LGSVL interface.
    input vehicle_kinematic_state:std::shared_ptr<autoware_auto_msgs::msg::VehicleKinematicState>;
    input vehicle_state_report:std::shared_ptr<autoware_auto_msgs::msg::VehicleStateReport>;
    
    // For responses from lane and parking planners.
    input lane_trajectory:std::shared_ptr<autoware_auto_msgs::msg::Trajectory>;
    input parking_trajectory:std::shared_ptr<autoware_auto_msgs::msg::Trajectory>;
    
    // Modified trajectory from object collision estimator.
    input modified_trajectory:std::shared_ptr<autoware_auto_msgs::msg::Trajectory>;
    
    //////// OUTPUTS ////////
    // For request to map provider.
    output map_request:std::shared_ptr<autoware_auto_msgs::srv::HADMapService_Request>;
    
    // For sending vehicle state command to LGSVL interface.
    output vehicle_state_command:std::shared_ptr<autoware_auto_msgs::msg::VehicleStateCommand>;
    
    // For requests to lane and parking planners.
    output lane_route:std::shared_ptr<autoware_auto_msgs::msg::Route>;
    output parking_route:std::shared_ptr<autoware_auto_msgs::msg::Route>;
    
    // Original trajectory to be consulted with object collision estimator.
    output original_trajectory:std::shared_ptr<autoware_auto_msgs::msg::Trajectory>;
    
    // Trajectory to MPC controller.
    output control_trajectory:std::shared_ptr<autoware_auto_msgs::msg::Trajectory>;

    //////// STATES ////////
    state node:autoware::behavior_planner_nodes::BehaviorPlannerNode*;
    state node_shared_ptr:std::shared_ptr<autoware::behavior_planner_nodes::BehaviorPlannerNode>;
    
    
    state global_path_route:autoware_auto_msgs::msg::Route;
    state previous_output_arrived_goal:std::chrono::time_point<std::chrono::system_clock>;
    state previous_output:std::chrono::time_point<std::chrono::system_clock>;
        
    reaction (startup) {=
        rclcpp::NodeOptions node_options = get_node_options_from_yaml(
            "/home/lfros/adehome/AutowareAuto/src/tools/autoware_auto_avp_demo/param/behavior_planner.param.yaml",
            "/**"
        );
        self->node = new autoware::behavior_planner_nodes::BehaviorPlannerNode(node_options);
        self->node_shared_ptr = std::shared_ptr<autoware::behavior_planner_nodes::BehaviorPlannerNode>(self->node);
    =}
    
    timer ros_spin(0, 10 msec);
    reaction (ros_spin) {=
        // Spin on ROS for a bit to get tf updates
        rclcpp::spin_some(self->node_shared_ptr);
    =}
   
    // Corresponds to BehaviorPlannerNode::on_route()
    reaction (global_path) -> map_request {=
        /* This can never happen in  LF :
         if (self->node->m_requesting_trajectory) {
            info_print("Route was rejected. Route cannot be updated while communicating with trajectory planners.");
        } else */ 
        if (!self->node->m_planner->is_vehicle_stopped(self->node->m_ego_state)) {
            info_print("Route was rejected. Route cannot be update while the vehicle is moving");
        } else {
            self->node->m_route = global_path->value;
            auto request = std::make_shared<autoware_auto_msgs::srv::HADMapService::Request>();
            request->requested_primitives.push_back(autoware_auto_msgs::srv::HADMapService::Request::FULL_MAP);
            SET(map_request, request);
        }
    =}
   
    // Corresponds to BehaviorPlannerNode::map_response()
    reaction (map) {=
        self->node->m_lanelet_map_ptr = std::make_shared<lanelet::LaneletMap>();
        autoware::common::had_map_utils::fromBinaryMsg(*map->value, self->node->m_lanelet_map_ptr);
        
        info_print("Received map");
        
        self->node->m_planner->set_route(*self->node->m_route, self->node->m_lanelet_map_ptr);
    =}
    
    // Corresponds to BehaviorPlannerNode::on_vehicle_state_report.
    reaction (vehicle_state_report) {=
        self->node->m_current_gear = vehicle_state_report->value->gear;
    =}
    
    // Corresponds to BehaviorPlannerNode::on_ego_state() and request_trajectory()
    reaction (vehicle_kinematic_state) -> lane_route, parking_route {=
        rclcpp::spin_some(self->node_shared_ptr);
        
        if (!self->node->m_tf_buffer->canTransform(
            "map", vehicle_kinematic_state->value->header.frame_id, tf2::TimePointZero)) {
              info_print("Waiting for localization result to become available");
            return;
        }
        
        self->node->m_ego_state = self->node->transform_to_map(*vehicle_kinematic_state->value);
        
        // do nothing if we haven't got route yet
        // FIXMESB: discards vehicle state if global path is not received yet
        if (!self->node->m_planner->is_route_ready()) {
              return;
        }

        // Check if we need new trajectory
        self->previous_output_arrived_goal = std::chrono::system_clock::now();
        if (self->node->m_planner->has_arrived_goal(self->node->m_ego_state)) {
            // TODO(mitsudome-r): replace this with throttled output in foxy
            const auto now = std::chrono::system_clock::now();
            // The following double has been translated from float64_t defined in:
            // Autoware/src/common/autoware_auto_common/include/common/types.hpp:
            // using float64_t = double;
            const auto throttle_time = std::chrono::duration<double>(3);
            if (now - self->previous_output_arrived_goal > throttle_time) {
                info_print("Trying to change gear");
                self->previous_output_arrived_goal = now;
            }
            info_print("Reached goal. Wait for another route");
        } else if (self->node->m_planner->has_arrived_subroute_goal(self->node->m_ego_state)) {
            // send next subroute
            self->node->m_planner->set_next_subroute();
            auto subroute = self->node->m_planner->get_current_subroute(self->node->m_ego_state);
            auto msg = std::make_shared<autoware_auto_msgs::msg::Route>(subroute.route);
              switch (subroute.planner_type) {
                case autoware::behavior_planner::PlannerType::LANE:
                    SET(lane_route, msg);
                    info_print("Sent lane trajectory action goal");
                    break;
                case autoware::behavior_planner::PlannerType::PARKING:
                    SET(parking_route, msg);
                    info_print("Sent parking trajectory action goal");
                    break;
                default:
                    break;
            }
        } else if (self->node->m_planner->needs_new_trajectory(self->node->m_ego_state)) {
            // update trajectory for current subroute
            self->node->m_planner->set_next_subroute();
            auto subroute = self->node->m_planner->get_current_subroute(self->node->m_ego_state);
            auto msg = std::make_shared<autoware_auto_msgs::msg::Route>(subroute.route);

            switch (subroute.planner_type) {
                case autoware::behavior_planner::PlannerType::LANE:
                    SET(lane_route, msg);
                    info_print("Sent lane trajectory action goal");
                    break;
                case autoware::behavior_planner::PlannerType::PARKING:
                    SET(parking_route, msg);
                    info_print("Sent parking trajectory action goal");
                    break;
                default:
                    break;
            }
        }
    =}
    
    // Corresponds to BehaviorPlannerNode::result_callback() for lane planner response.
    reaction (vehicle_kinematic_state, lane_trajectory, parking_trajectory) -> control_trajectory, original_trajectory, vehicle_state_command {=
        auto trj = lane_trajectory->value;
        if (!lane_trajectory->is_present && !parking_trajectory->is_present) {
            return;
        } else if (lane_trajectory->is_present && parking_trajectory->is_present) {
            warning_print("Both trajectories present!");
        } else if (parking_trajectory->is_present) {
            trj = parking_trajectory->value;
        } 
        
        self->node->m_planner->set_trajectory(*trj);
        
        self->previous_output = std::chrono::system_clock::now();
        const auto desired_gear = self->node->m_planner->get_desired_gear(self->node->m_ego_state);

        // FIXMESB: either need to change gear, or need to avoid collision using the collision estimator,
        // or if no such service is available, just publish the trajectory directly
        if (desired_gear != self->node->m_current_gear) {
            const auto throttle_time = std::chrono::duration<double>(3);
        
            // TODO(mitsudome-r): replace this with throttled output in foxy
            const auto now = std::chrono::system_clock::now();
            if (now - self->previous_output > throttle_time) {
                info_print("Trying to change gear");
                self->previous_output = now;
            }
        
        
            auto gear_command = std::make_shared<autoware_auto_msgs::msg::VehicleStateCommand>();
            gear_command->gear = desired_gear;
            gear_command->mode = autoware_auto_msgs::msg::VehicleStateCommand::MODE_AUTONOMOUS;
            gear_command->stamp = vehicle_kinematic_state->value->header.stamp;
            //gear_command.sequence_number = this->sequence_number;
            SET(vehicle_state_command, gear_command);
        
            // send trajectory with current state so that velocity will be zero in order to change gear
            auto trajectory = std::make_shared<autoware_auto_msgs::msg::Trajectory>();
            trajectory->header.frame_id = "map";
            trajectory->header.stamp = vehicle_kinematic_state->value->header.stamp;
            trajectory->points.push_back(vehicle_kinematic_state->value->state);
            //trajectory.sequence_number = this->sequence_number;
            //this->sequence_number++;
            SET(control_trajectory, trajectory);
        } else {
            auto trajectory = self->node->m_planner->get_trajectory(self->node->m_ego_state);
            // trajectory.header = m_ego_state.header;
            trajectory.header.frame_id = "map";
            trajectory.header.stamp = vehicle_kinematic_state->value->header.stamp;
        
            // If object collision estimation is enabled, send trajectory through the collision estimator
            // FIXMESB: trajectory can go through the object collision estimator
            auto msg = std::make_shared<autoware_auto_msgs::msg::Trajectory>(trajectory);
            SET(original_trajectory, msg);
        }
    =}
    
    
    // Corresponds to BehaviorPlannerNode::modify_trajectory_response().
    reaction (modified_trajectory) -> control_trajectory {=
        // Initialize with modified trajectory from object collision estimator.
        auto trajectory = modified_trajectory->value;
        
        // Set current position with velocity zero to do emergency stop in case
        // collision estimator fails or if there is obstacle on first point
        if (trajectory->points.empty()) {
            auto stopping_point = self->node->m_ego_state.state;
            stopping_point.longitudinal_velocity_mps = 0.0;
            trajectory->points.push_back(stopping_point);
        }
        SET(control_trajectory, trajectory);
    =}
}

main reactor {
    bp = new behavior_planner();
}