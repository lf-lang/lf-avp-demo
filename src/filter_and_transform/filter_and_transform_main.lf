/**
 * Note: Please change AUTOWARE_HOME in include/CMakeListsExtension.txt to
 * reflect your top-level AutowareAuto folder. You can do this by changing
 * the follwoing line:
 *
 *     set(AUTOWARE_HOME /home/$ENV{USER}/adehome/AutowareAuto)
 *
 */
target C {
    cmake: true,
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["include/package.xml", "../include/utils.hpp"], 
    threads: 1,
    flags: ["-Wno-write-strings", "-g"],
    compiler: "g++"
};

# preamble -> Wiki LF explains -> https://github.com/icyphy/lingua-franca/wiki/Writing-Reactors-in-C#preamble

preamble {=
    #include "point_cloud_filter_transform_node.hpp" /* This is AUTOWARE node */
    #include "utils.hpp"
=}

reactor filter_and_transform (
    bank_index:int(0), 
    config_namespaces:std::vector<string>({=std::vector<string>{"/lidar_front/filter_transform_vlp16_front", "/lidar_rear/filter_transform_vlp16_rear"}=}),
    lidar_topic_names:std::vector<char*>({=std::vector<char*>{"/lidar_front/points_raw", "/lidar_rear/points_raw"}=})
) {
    // Point in come from ROS
    timer points_in(0, 30 msec);
    output points_out:std::shared_ptr<sensor_msgs::msg::PointCloud2>;

    state count:int(0);

    /* This is state variable for LF program https://github.com/icyphy/lingua-franca/wiki/Writing-Reactors-in-C#using-state-variables*/

    state node:autoware::perception::filters::point_cloud_filter_transform_nodes::PointCloud2FilterTransformNode*;
    state node_shared_ptr:std::shared_ptr<autoware::perception::filters::point_cloud_filter_transform_nodes::PointCloud2FilterTransformNode>;

    reaction (startup) {=
        
        char program_name[200];
        char topic_cmd[200];
        sprintf(program_name, "lf_filter_and_transform_%d", self->bank_index);
        sprintf(topic_cmd, "points_in:=%s", self->lidar_topic_names[self->bank_index]);
        char *argv[] = {program_name, "--ros-args", "--remap", topic_cmd, "--", NULL};
        
        rclcpp::NodeOptions nodeOptions = get_node_options_from_yaml(
            "/home/lfros/workspace/XronOS/src/filter_and_transform/include/pc_filter_transform.param.yaml",
            self->config_namespaces[self->bank_index],
            5,
            argv
        );

        self->node = new autoware::perception::filters::point_cloud_filter_transform_nodes::PointCloud2FilterTransformNode(nodeOptions);
        self->node_shared_ptr = std::shared_ptr<autoware::perception::filters::point_cloud_filter_transform_nodes::PointCloud2FilterTransformNode>(self->node);
    =}


    reaction (points_in) -> points_out {=
        // Process some events
        rclcpp::spin_some(self->node_shared_ptr);
        
        info_print("Input width = %d", self->node->m_filtered_transformed_msg.width);
        
        // const auto filtered_transformed_msg = self->node->filter_and_transform(points_in->value);
        // Let the callback function in ROS process the pointcloud messages.
        // Instead of publishing, it will put the results in m_filtered_transformed_msg
        auto msg = std::make_shared<sensor_msgs::msg::PointCloud2>(self->node->m_filtered_transformed_msg);
        SET(points_out, msg);
    =}
}

main reactor {
    fat = new filter_and_transform(
        config_namespaces = {=std::vector<string>{"/lidar_front/filter_transform_vlp16_front", "/lidar_rear/filter_transform_vlp16_rear"}=}
    );
}

