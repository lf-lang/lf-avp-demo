/**
 * Note: Please change AUTOWARE_HOME in include/CMakeListsExtension.txt to
 * reflect your top-level AutowareAuto folder. You can do this by changing
 * the follwoing line:
 * 
 *     set(AUTOWARE_HOME /home/$ENV{USER}/adehome/AutowareAuto)
 * 
 */
target C {
    cmake: true,
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["include/package.xml", "../include/utils.hpp"], 
    threads: 1,
    flags: ["-Wno-write-strings", "-g"],
    compiler: "g++"
};

# preamble -> Wiki LF explains -> https://github.com/icyphy/lingua-franca/wiki/Writing-Reactors-in-C#preamble

preamble {= 
    #include "point_cloud_filter_transform_node.hpp" /* This is AUTOWARE node */
    #include "utils.hpp"
=}

reactor filter_and_transform (config_namespaces:std::vector<string>(2)) {
    input points_in:sensor_msgs::msg::PointCloud2;
    output points_out:sensor_msgs::msg::PointCloud2;
    
    state count:int(0);
    
    /* This is state variable for LF program https://github.com/icyphy/lingua-franca/wiki/Writing-Reactors-in-C#using-state-variables*/

    state node:autoware::perception::filters::point_cloud_filter_transform_nodes::PointCloud2FilterTransformNode*;
    
    reaction (startup) {=
        rclcpp::NodeOptions nodeOptions = get_node_options_from_yaml(
            "/home/lfros/workspace/XronOS/src/filter_and_transform/include/pc_filter_transform.param.yaml", 
            self->config_namespaces[self->bank_index]
        );
        
        self->node = new autoware::perception::filters::point_cloud_filter_transform_nodes::PointCloud2FilterTransformNode(nodeOptions);
    =} 

    
    reaction (points_in) -> points_out {=
        const auto filtered_transformed_msg = self->node->filter_and_transform(points_in->value);
        SET(points_out, filtered_transformed_msg);
    =}
}

main reactor {
    fat = new filter_and_transform(config_namespaces = {=std::vector<string>{"/lidar_front/filter_transform_vlp16_front", "/lidar_rear/filter_transform_vlp16_rear"}=});
}

