/**
 * Note: Please change AUTOWARE_HOME in include/CMakeListsExtension.txt to
 * reflect your top-level AutowareAuto folder. You can do this by changing
 * the follwoing line:
 * 
 *     set(AUTOWARE_HOME /home/$ENV{USER}/adehome/AutowareAuto)
 * 
 */
target CCpp {
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["../include/utils.hpp", "../include/constants.hpp"], 
    threading: true
};

preamble {= 
    #include "mpc_controller_nodes/mpc_controller_node.hpp" /* This is AUTOWARE node */
    #include "utils.hpp"
    #include "constants.hpp"
    std::string yaml_path = get_autoware_home() + "/" + AVP_DEMO_PARAM_PATH + "/" + MPC_CONTROLLER_PARAM;
=}

reactor mpc_controller {
    input trajectory:std::shared_ptr<autoware_auto_msgs::msg::Trajectory>;
    input vehicle_kinematic_state:std::shared_ptr<autoware_auto_msgs::msg::VehicleKinematicState>;
    
    output command:std::shared_ptr<autoware_auto_msgs::msg::VehicleControlCommand>;
    
    state node:motion::control::mpc_controller_nodes::MpcControllerNode*;
    state node_shared_ptr:std::shared_ptr<motion::control::mpc_controller_nodes::MpcControllerNode>;
    
    reaction (startup) {=
        rclcpp::NodeOptions nodeOptions = get_node_options_from_yaml(
            yaml_path.c_str(), 
            "/**"
        );
        
        self->node = new motion::control::mpc_controller_nodes::MpcControllerNode(
            "mpc_controller", 
            "",
            nodeOptions
        );
        
        self->node_shared_ptr = std::shared_ptr<motion::control::mpc_controller_nodes::MpcControllerNode>(self->node);
        //std::cout << self->node->m_controller->get_base_config().safe_deceleration_rate() << std::endl;
    =}
    
    // For tf stuff
    timer ros_spin(0, 10 msec);
    reaction (ros_spin) {=
        rclcpp::spin_some(self->node_shared_ptr);
    =}

    // The order of reactions is important.
    reaction (vehicle_kinematic_state) -> command {=
        // FIXME: The way that Autoware does this is convoluted, and uses a
        // buffer to keep kinematic states.
        // If vehicle_kinematic_state and trajectory are always logically
        // simoultanous, all we need to do is call
        // m_controller->set_trajectory(*trajectory->value); and
        // then try_compute(*vehicle_kinematic_state->value); See commented out
        // code in the body of this and the next reaction.

        // self->node->try_compute(*vehicle_kinematic_state->value);

        self->node->on_state(vehicle_kinematic_state->value);

        // Check if there is a command to send after processing the state.
        if (self->node->cmd_is_set) {
            auto msg = std::make_shared<autoware_auto_msgs::msg::VehicleControlCommand>(self->node->cmd);
            SET(command, msg);
            self->node->cmd_is_set = false;
        }
    =}

    // The order of reactions is important.
    reaction (trajectory) -> command {=
        // try {
        //     self->node->m_controller->set_trajectory(*trajectory->value);
        // } catch (...) {
        //     self->node->on_bad_trajectory(std::current_exception());
        // }
        info_print("(YOLO)>>> MPC received trajectory at: {%lu}", get_elapsed_physical_time());
        self->node->on_trajectory(trajectory->value);

        // Check if there is a command to send after processing the state.
        if (self->node->cmd_is_set) {
            auto msg = std::make_shared<autoware_auto_msgs::msg::VehicleControlCommand>(self->node->cmd);
            SET(command, msg);
            self->node->cmd_is_set = false;
        }
 	=}
}

main reactor {
    mpc = new mpc_controller();
}
