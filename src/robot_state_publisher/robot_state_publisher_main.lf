target CCpp {
    cmake-include: "include/CMakeListsExtension.txt",
    files: ["../include/utils.hpp"], 
    threading: true
};

preamble {=
    #include "robot_state_publisher/robot_state_publisher.hpp"
    #include "utils.hpp"
    #include <fstream>

    void* spin_node(void* args) {
        auto node_shared_ptr_ptr = static_cast<std::shared_ptr<robot_state_publisher::RobotStatePublisher>*>(args);
        auto node_shared_ptr = *node_shared_ptr_ptr;
        while (rclcpp::ok()) {
            rclcpp::spin(node_shared_ptr);
        }
        delete node_shared_ptr_ptr;
        return 0;
    }
=}

reactor robot_state_publisher {

    state node:robot_state_publisher::RobotStatePublisher*;
    state node_shared_ptr:std::shared_ptr<robot_state_publisher::RobotStatePublisher>;
    
    reaction (startup) {=
        // Parse the urdf/xml file
        std::string urdf_file_name = get_autoware_home() + "/src/urdf/lexus_rx_450h_description/urdf/lexus_rx_450h.urdf";
        std::ifstream f(urdf_file_name); 
        std::stringstream ss;
        ss << f.rdbuf();
        
        try {
            rclcpp::init(0, NULL);
        } catch (...) { /*  Ignore */ }
        
               
        rclcpp::NodeOptions nodeOptions;
        
        nodeOptions.append_parameter_override("robot_description", ss.str());
                
        self->node = new robot_state_publisher::RobotStatePublisher(nodeOptions);
        self->node_shared_ptr = std::shared_ptr<robot_state_publisher::RobotStatePublisher>(self->node);
        
        pthread_t spinner_thread;
        pthread_create(
            &spinner_thread, 
            NULL, 
            &spin_node, 
            static_cast<void*>(new std::shared_ptr<robot_state_publisher::RobotStatePublisher>(self->node_shared_ptr)));
    
    =}
}

main reactor {
    li = new robot_state_publisher();
}



